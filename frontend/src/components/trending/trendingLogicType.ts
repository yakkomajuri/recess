// Generated by kea-typegen on Thu, 07 Mar 2024 20:23:58 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Feed } from '../feed/feedLogic'

export interface trendingLogicType extends Logic {
    actionCreators: {
        loadTrendingFeeds: () => {
            type: 'load trending feeds (src.components.trending.trendingLogic)'
            payload: any
        }
        loadTrendingFeedsSuccess: (
            trendingFeeds: Feed[],
            payload?: any
        ) => {
            type: 'load trending feeds success (src.components.trending.trendingLogic)'
            payload: {
                trendingFeeds: Feed[]
                payload?: any
            }
        }
        loadTrendingFeedsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load trending feeds failure (src.components.trending.trendingLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load trending feeds (src.components.trending.trendingLogic)': 'loadTrendingFeeds'
        'load trending feeds success (src.components.trending.trendingLogic)': 'loadTrendingFeedsSuccess'
        'load trending feeds failure (src.components.trending.trendingLogic)': 'loadTrendingFeedsFailure'
    }
    actionTypes: {
        loadTrendingFeeds: 'load trending feeds (src.components.trending.trendingLogic)'
        loadTrendingFeedsSuccess: 'load trending feeds success (src.components.trending.trendingLogic)'
        loadTrendingFeedsFailure: 'load trending feeds failure (src.components.trending.trendingLogic)'
    }
    actions: {
        loadTrendingFeeds: () => void
        loadTrendingFeedsSuccess: (trendingFeeds: Feed[], payload?: any) => void
        loadTrendingFeedsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadTrendingFeeds: () => Promise<any>
        loadTrendingFeedsSuccess: (trendingFeeds: Feed[], payload?: any) => Promise<any>
        loadTrendingFeedsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        trendingFeeds: Feed[]
        trendingFeedsLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['src', 'components', 'trending', 'trendingLogic']
    pathString: 'src.components.trending.trendingLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        trendingFeeds: Feed[]
        trendingFeedsLoading: boolean
    }
    reducers: {
        trendingFeeds: (state: Feed[], action: any, fullState: any) => Feed[]
        trendingFeedsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        trendingFeeds: Feed[]
        trendingFeedsLoading: boolean
    }
    selectors: {
        trendingFeeds: (state: any, props?: any) => Feed[]
        trendingFeedsLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        trendingFeeds: Feed[]
        trendingFeedsLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
