// Generated by kea-typegen on Wed, 06 Mar 2024 12:26:59 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from "kea";

import type { CommentToCreate, Post, PostComment } from "./postLogic";

export interface postLogicType extends Logic {
  actionCreators: {
    likePost: () => {
      type: "like post (src.components.feed.postLogic)";
      payload: {
        value: true;
      };
    };
    unlikePost: () => {
      type: "unlike post (src.components.feed.postLogic)";
      payload: {
        value: true;
      };
    };
    comment: (comment: CommentToCreate) => {
      type: "comment (src.components.feed.postLogic)";
      payload: {
        comment: CommentToCreate;
      };
    };
    loadPost: () => {
      type: "load post (src.components.feed.postLogic)";
      payload: any;
    };
    loadPostSuccess: (
      post: Post | null,
      payload?: any
    ) => {
      type: "load post success (src.components.feed.postLogic)";
      payload: {
        post: Post | null;
        payload?: any;
      };
    };
    loadPostFailure: (
      error: string,
      errorObject?: any
    ) => {
      type: "load post failure (src.components.feed.postLogic)";
      payload: {
        error: string;
        errorObject?: any;
      };
    };
    loadComments: () => {
      type: "load comments (src.components.feed.postLogic)";
      payload: any;
    };
    loadCommentsSuccess: (
      comments: PostComment[] | null,
      payload?: any
    ) => {
      type: "load comments success (src.components.feed.postLogic)";
      payload: {
        comments: PostComment[] | null;
        payload?: any;
      };
    };
    loadCommentsFailure: (
      error: string,
      errorObject?: any
    ) => {
      type: "load comments failure (src.components.feed.postLogic)";
      payload: {
        error: string;
        errorObject?: any;
      };
    };
  };
  actionKeys: {
    "like post (src.components.feed.postLogic)": "likePost";
    "unlike post (src.components.feed.postLogic)": "unlikePost";
    "comment (src.components.feed.postLogic)": "comment";
    "load post (src.components.feed.postLogic)": "loadPost";
    "load post success (src.components.feed.postLogic)": "loadPostSuccess";
    "load post failure (src.components.feed.postLogic)": "loadPostFailure";
    "load comments (src.components.feed.postLogic)": "loadComments";
    "load comments success (src.components.feed.postLogic)": "loadCommentsSuccess";
    "load comments failure (src.components.feed.postLogic)": "loadCommentsFailure";
  };
  actionTypes: {
    likePost: "like post (src.components.feed.postLogic)";
    unlikePost: "unlike post (src.components.feed.postLogic)";
    comment: "comment (src.components.feed.postLogic)";
    loadPost: "load post (src.components.feed.postLogic)";
    loadPostSuccess: "load post success (src.components.feed.postLogic)";
    loadPostFailure: "load post failure (src.components.feed.postLogic)";
    loadComments: "load comments (src.components.feed.postLogic)";
    loadCommentsSuccess: "load comments success (src.components.feed.postLogic)";
    loadCommentsFailure: "load comments failure (src.components.feed.postLogic)";
  };
  actions: {
    likePost: () => void;
    unlikePost: () => void;
    comment: (comment: CommentToCreate) => void;
    loadPost: () => void;
    loadPostSuccess: (post: Post | null, payload?: any) => void;
    loadPostFailure: (error: string, errorObject?: any) => void;
    loadComments: () => void;
    loadCommentsSuccess: (
      comments: PostComment[] | null,
      payload?: any
    ) => void;
    loadCommentsFailure: (error: string, errorObject?: any) => void;
  };
  asyncActions: {
    likePost: () => Promise<any>;
    unlikePost: () => Promise<any>;
    comment: (comment: CommentToCreate) => Promise<any>;
    loadPost: () => Promise<any>;
    loadPostSuccess: (post: Post | null, payload?: any) => Promise<any>;
    loadPostFailure: (error: string, errorObject?: any) => Promise<any>;
    loadComments: () => Promise<any>;
    loadCommentsSuccess: (
      comments: PostComment[] | null,
      payload?: any
    ) => Promise<any>;
    loadCommentsFailure: (error: string, errorObject?: any) => Promise<any>;
  };
  defaults: {
    post: any;
    postLoading: boolean;
    comments: any;
    commentsLoading: boolean;
  };
  events: {};
  key: string;
  listeners: {
    likePost: ((
      action: {
        type: "like post (src.components.feed.postLogic)";
        payload: {
          value: true;
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
    unlikePost: ((
      action: {
        type: "unlike post (src.components.feed.postLogic)";
        payload: {
          value: true;
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
    comment: ((
      action: {
        type: "comment (src.components.feed.postLogic)";
        payload: {
          comment: CommentToCreate;
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
  };
  path: ["src", "components", "feed", "postLogic"];
  pathString: "src.components.feed.postLogic";
  props: {
    postUuid?: string;
  };
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    post: any;
    postLoading: boolean;
    comments: any;
    commentsLoading: boolean;
  };
  reducers: {
    post: (state: any, action: any, fullState: any) => any;
    postLoading: (state: boolean, action: any, fullState: any) => boolean;
    comments: (state: any, action: any, fullState: any) => any;
    commentsLoading: (state: boolean, action: any, fullState: any) => boolean;
  };
  selector: (state: any) => {
    post: any;
    postLoading: boolean;
    comments: any;
    commentsLoading: boolean;
  };
  selectors: {
    post: (state: any, props?: any) => any;
    postLoading: (state: any, props?: any) => boolean;
    comments: (state: any, props?: any) => any;
    commentsLoading: (state: any, props?: any) => boolean;
  };
  sharedListeners: {};
  values: {
    post: any;
    postLoading: boolean;
    comments: any;
    commentsLoading: boolean;
  };
  _isKea: true;
  _isKeaWithKey: true;
}
